using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using UnityEngine;
using static Settings;

/*
 *  The singleton settings instance which will be present in all scenes
 *  This contains the pairing of every setting and its respective value
 *  that can be changed during the game and initalized through the inspector
 *  
 *  Go through the dictionary to set a value
 */
public class SettingsInstance : MonoBehaviour
{
    // The settings instance
    public static SettingsInstance Instance { get; private set; }

    // The set of KeyCode pairings
    public KeyCodeValue[] controlsValues =
    {
        new KeyCodeValue { key = Controls.Interact, value = KeyCode.F },
        new KeyCodeValue { key = Controls.MenuTransition, value = KeyCode.Escape },
        new KeyCodeValue { key = Controls.LeftClick, value = KeyCode.Mouse0 },
        new KeyCodeValue { key = Controls.RightClick, value = KeyCode.Mouse1 },
        new KeyCodeValue { key = Controls.DialogSkip, value = KeyCode.Return }
    };

    // The set of float value pairings
    public FloatValue[] floatValues =
    {
        new FloatValue { key = FloatValues.DialogDisplayYLocation, value = -3.0f },
        new FloatValue { key = FloatValues.PlayerInteractDistance, value = 1.0f },
        new FloatValue { key = FloatValues.DialogCharactersPerSecond, value = 32f },
        new FloatValue { key = FloatValues.DialogCompletionWaitForCloseSeconds, value = 5f }
    };

    // The set of prefab animation pairings
    public PrefabAnimationValue[] prefabAnimValues = 
    { 
        new PrefabAnimationValue { key = PrefabAnimations.NullAnim, value = AnimationSpriteClass.NULL_STRUCT }
    };

    // The set of prefab object pairings
    public PrefabObjectValue[] prefabObjectValues = { };


    //Dictionaries generated by the value sets
    public Dictionary<Controls, KeyCodeValue> controlsPairings = new Dictionary<Controls, KeyCodeValue>();
    public Dictionary<FloatValues, FloatValue> floatPairings = new Dictionary<FloatValues, FloatValue>();
    public Dictionary<PrefabAnimations, PrefabAnimationValue> animPairings = new Dictionary<PrefabAnimations, PrefabAnimationValue>();
    public Dictionary<PrefabObjects, PrefabObjectValue> objectPairings = new Dictionary<PrefabObjects, PrefabObjectValue>();

    void Start()
    {
        Instance = this;
        DontDestroyOnLoad(gameObject);

        //Set up dicitonaries
        foreach (KeyCodeValue v in controlsValues){controlsPairings[v.key] = v;}
        foreach (FloatValue v in floatValues) { floatPairings[v.key] = v; }
        foreach (PrefabAnimationValue v in prefabAnimValues) { animPairings[v.key] = v; }
        foreach (PrefabObjectValue v in prefabObjectValues) { objectPairings[v.key] = v; }
    }

    // Key value parings for each setting type
    [System.Serializable] public struct KeyCodeValue { public Controls key; public KeyCode value; }
    [System.Serializable] public struct FloatValue { public FloatValues key; public float value; }
    [System.Serializable] public struct PrefabAnimationValue { public PrefabAnimations key; public AnimationSpriteClass.AnimationStruct value; }
    [System.Serializable] public struct PrefabObjectValue { public PrefabObjects key; public GameObject value; }
}

/*
 * The accessor for the settings.
 * All code should access the respective setting through the enum
 */
public static class Settings
{
    // Key Code controls
    public enum Controls
    {
        Interact, LeftClick, MenuTransition, RightClick, DialogSkip
    }

    // Float values
    public enum FloatValues
    {
        PlayerInteractDistance, DialogDisplayYLocation, DialogCharactersPerSecond, DialogCompletionWaitForCloseSeconds
    }

    // Prefab animations
    public enum PrefabAnimations
    {
        BoeBon, NullAnim
    }
    // Prefab objects
    public enum PrefabObjects
    {
        DialogDisplay
    }

    //Returns the KeyCode associated with the Control
    public static KeyCode Get(this Controls control)
    {
        return SettingsInstance.Instance.controlsPairings[control].value;
    }

    //Returns the float associated with the FloatValue
    public static float Get(this FloatValues value)
    {
        return SettingsInstance.Instance.floatPairings[value].value;
    }

    //Returns the associated prefab object
    public static GameObject Get(this PrefabObjects obj)
    {
        return SettingsInstance.Instance.objectPairings[obj].value;
    }

    //Returns the associated animation 
    public static AnimationSpriteClass.AnimationStruct Get(this PrefabAnimations obj)
    {
        return SettingsInstance.Instance.animPairings[obj].value;
    }

}
